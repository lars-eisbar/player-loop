"""Video-Player mit Steuerung per GPIO-Taster.

Diese Variante nutzt ``mpv`` anstelle von ``omxplayer``.
"""

import os
import signal
import socket
import subprocess
import time
import json
import shutil

import RPi.GPIO as GPIO

# Pfade zu den abzuspielenden Videos
MAIN_VIDEO = '/path/to/main_video.mp4'
ALT_VIDEO = '/path/to/alt_video.mp4'

# Pfad zu mpv. Kann über die Umgebungsvariable ``MPV_CMD`` angepasst werden.
MPV_CMD = os.environ.get("MPV_CMD", shutil.which("mpv") or "mpv")

# Basisschalter für mpv. Falls Probleme auftreten, können sie hier angepasst
# oder geleert werden.
MPV_OPTS_LOOP = ["--fs", "--loop=inf", "--mute=yes", "--really-quiet"]
MPV_OPTS_ONCE = ["--fs", "--really-quiet"]

# GPIO-Pin, an dem der Taster angeschlossen ist
BUTTON_PIN = 23


def start_loop(video_path: str) -> tuple[subprocess.Popen, str]:
    """Startet ein Video endlos in einer Schleife ohne Ton und gibt den Socket-Pfad zurück."""
    ipc_path = f"/tmp/mpv_main_{int(time.time()*1000)}.sock"
    proc = subprocess.Popen(
        [
            MPV_CMD,
            *MPV_OPTS_LOOP,
            f"--input-ipc-server={ipc_path}",
            video_path,
        ],
        stdin=subprocess.PIPE,
        # Ausgaben von mpv nicht unterdrücken, damit Fehlermeldungen sichtbar sind
        preexec_fn=os.setsid,
    )
    return proc, ipc_path


def start_once(video_path: str) -> tuple[subprocess.Popen, str]:
    """Spielt ein Video einmalig mit Einblendung ab und gibt den Socket-Pfad zurück."""
    ipc_path = f"/tmp/mpv_{int(time.time()*1000)}.sock"
    proc = subprocess.Popen(
        [
            MPV_CMD,
            *MPV_OPTS_ONCE,
            f"--input-ipc-server={ipc_path}",
            "--vf=lavfi=fade=t=in:st=0:d=1",
            "--af=lavfi=afade=t=in:st=0:d=1",
            video_path,
        ],
        stdin=subprocess.PIPE,
        # Ausgaben von mpv nicht unterdrücken, damit Fehlermeldungen sichtbar sind
        preexec_fn=os.setsid,
    )
    return proc, ipc_path


def _fade_out(ipc_path: str, duration: float = 1.0) -> None:
    """Blendet den mpv-Prozess per IPC langsam aus."""
    try:
        with socket.socket(socket.AF_UNIX) as sock:
            sock.connect(ipc_path)
            for kind in ("vf", "af"):
                msg = {"command": [kind, "add", f"lavfi=fade=t=out:st=0:d={duration}"]}
                sock.sendall((json.dumps(msg) + "\n").encode())
    except OSError:
        return
    time.sleep(duration)


def stop_player(proc: subprocess.Popen | None, ipc_path: str | None = None):
    """Beendet einen laufenden mpv-Prozess."""
    if proc and proc.poll() is None:
        if ipc_path:
            _fade_out(ipc_path)
        os.killpg(proc.pid, signal.SIGTERM)
        try:
            proc.wait(timeout=5)
        except subprocess.TimeoutExpired:
            os.killpg(proc.pid, signal.SIGKILL)
    if ipc_path and os.path.exists(ipc_path):
        os.remove(ipc_path)






def main() -> None:
    # GPIO initialisieren
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(BUTTON_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)

    # Hauptvideo starten
    main_proc: subprocess.Popen | None
    main_socket: str | None
    main_proc, main_socket = start_loop(MAIN_VIDEO)
    # Prozess für Überlagerungsvideo (noch nicht aktiv)
    overlay_proc: subprocess.Popen | None = None
    overlay_socket: str | None = None

    try:
        while True:
            # Tasterzustand abfragen (LOW = gedrückt)
            button_pressed = GPIO.input(BUTTON_PIN) == GPIO.LOW

            if button_pressed:
                # Bei Tastendruck: Overlay stoppen und Hauptvideo wiederholen
                if overlay_proc:
                    stop_player(overlay_proc, overlay_socket)
                    overlay_proc = None
                    overlay_socket = None
                    main_proc, main_socket = start_loop(MAIN_VIDEO)
            else:
                # Taste losgelassen: Hauptvideo stoppen und Overlay starten
                if overlay_proc is None:
                    stop_player(main_proc, main_socket)
                    main_proc = None
                    main_socket = None
                    overlay_proc, overlay_socket = start_once(ALT_VIDEO)

            # Overlay fertig? Dann ggf. Hauptvideo neu starten
            if overlay_proc and overlay_proc.poll() is not None:
                stop_player(overlay_proc, overlay_socket)
                overlay_proc = None
                overlay_socket = None
                main_proc, main_socket = start_loop(MAIN_VIDEO)

            # Kurze Pause, um CPU zu entlasten
            time.sleep(0.1)
    except KeyboardInterrupt:
        pass
    finally:
        stop_player(main_proc, main_socket)
        stop_player(overlay_proc, overlay_socket)
        GPIO.cleanup()


if __name__ == "__main__":
    # Einstiegspunkt, wenn das Skript direkt ausgeführt wird
    main()
