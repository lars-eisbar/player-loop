"""Video-Player mit Steuerung per GPIO-Taster.

Diese Variante nutzt ``mpv`` anstelle von ``omxplayer``.
"""

import os
import signal
import socket
import subprocess
import time
import json
import shutil

import RPi.GPIO as GPIO

# Pfade zu den abzuspielenden Videos
# Pfade zu den abzuspielenden Videos (Index 0 wird geloopt, Index 1 einmalig)
PLAYLIST = [
    '/path/to/main_video.mp4',  # Loop-Video (ohne Ton)
    '/path/to/alt_video.mp4',   # Hauptvideo mit Ton
]

# Pfad zu mpv. Kann über die Umgebungsvariable ``MPV_CMD`` angepasst werden.
MPV_CMD = os.environ.get("MPV_CMD", shutil.which("mpv") or "mpv")

# Basisschalter für mpv. Falls Probleme auftreten, können sie hier angepasst
# oder geleert werden.
MPV_OPTS = ["--fs", "--idle=yes", "--really-quiet"]

# GPIO-Pin, an dem der Taster angeschlossen ist
BUTTON_PIN = 23


def start_player(video_path: str) -> tuple[subprocess.Popen, socket.socket, str]:
    """Startet mpv im Idle-Modus und gibt Prozess, Socket und Pfad zurück."""
    ipc_path = f"/tmp/mpv_{int(time.time() * 1000)}.sock"
    proc = subprocess.Popen(
        [
            MPV_CMD,
            *MPV_OPTS,
            f"--input-ipc-server={ipc_path}",
            video_path,
        ],
        stdin=subprocess.PIPE,
        preexec_fn=os.setsid,
    )
    # Auf Socket warten
    for _ in range(50):
        if os.path.exists(ipc_path):
            break
        time.sleep(0.1)
    sock = socket.socket(socket.AF_UNIX)
    sock.connect(ipc_path)
    sock.setblocking(False)
    return proc, sock, ipc_path


def mpv_send(sock: socket.socket, command: list) -> None:
    """Sendet einen Befehl an mpv."""
    msg = json.dumps({"command": command}) + "\n"
    sock.sendall(msg.encode())


def poll_events(sock: socket.socket, buffer: bytearray) -> list[dict]:
    """Liest alle verfügbaren Ereignisse vom mpv-Socket."""
    events: list[dict] = []
    try:
        while True:
            chunk = sock.recv(4096)
            if not chunk:
                break
            buffer.extend(chunk)
    except BlockingIOError:
        pass
    except OSError:
        # Socket wurde unerwartet geschlossen
        return []

    while b"\n" in buffer:
        line, _, rest = buffer.partition(b"\n")
        buffer[:] = rest
        try:
            events.append(json.loads(line.decode()))
        except json.JSONDecodeError:
            continue
    return events


def _fade_out(ipc_path: str, duration: float = 1.0) -> None:
    """Blendet den mpv-Prozess per IPC langsam aus."""
    try:
        with socket.socket(socket.AF_UNIX) as sock:
            sock.connect(ipc_path)
            for kind in ("vf", "af"):
                msg = {"command": [kind, "add", f"lavfi=fade=t=out:st=0:d={duration}"]}
                sock.sendall((json.dumps(msg) + "\n").encode())
    except OSError:
        return
    time.sleep(duration)


def stop_player(proc: subprocess.Popen | None, ipc_path: str | None = None):
    """Beendet einen laufenden mpv-Prozess."""
    if proc and proc.poll() is None:
        if ipc_path:
            _fade_out(ipc_path)
        os.killpg(proc.pid, signal.SIGTERM)
        try:
            proc.wait(timeout=5)
        except subprocess.TimeoutExpired:
            os.killpg(proc.pid, signal.SIGKILL)
    if ipc_path and os.path.exists(ipc_path):
        os.remove(ipc_path)






def main() -> None:
    # GPIO initialisieren
    GPIO.setmode(GPIO.BCM)
    GPIO.setup(BUTTON_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)

    proc, sock, ipc_path = start_player(PLAYLIST[0])
    mpv_send(sock, ["playlist-add", PLAYLIST[1]])
    mpv_send(sock, ["set_property", "loop-file", "inf"])
    mpv_send(sock, ["set_property", "mute", "yes"])
    current = 0
    buf = bytearray()

    try:
        while True:
            if proc.poll() is not None:
                stop_player(proc, ipc_path)
                proc, sock, ipc_path = start_player(PLAYLIST[current])
                if current == 0:
                    mpv_send(sock, ["playlist-add", PLAYLIST[1]])
                    mpv_send(sock, ["set_property", "loop-file", "inf"])
                    mpv_send(sock, ["set_property", "mute", "yes"])
                else:
                    mpv_send(sock, ["playlist-add", PLAYLIST[0]])
                    mpv_send(sock, ["set_property", "mute", "no"])

            for event in poll_events(sock, buf):
                if event.get("event") == "end-file" and current == 1:
                    mpv_send(sock, ["playlist-play-index", 0])
                    mpv_send(sock, ["set_property", "loop-file", "inf"])
                    mpv_send(sock, ["set_property", "mute", "yes"])
                    current = 0

            pressed = GPIO.input(BUTTON_PIN) == GPIO.HIGH
            if pressed and current != 0:
                mpv_send(sock, ["playlist-play-index", 0])
                mpv_send(sock, ["set_property", "loop-file", "inf"])
                mpv_send(sock, ["set_property", "mute", "yes"])
                current = 0
            elif not pressed and current != 1:
                mpv_send(sock, ["set_property", "loop-file", "no"])
                mpv_send(sock, ["playlist-play-index", 1])
                mpv_send(sock, ["set_property", "mute", "no"])
                current = 1

            time.sleep(0.1)
    except KeyboardInterrupt:
        pass
    finally:
        stop_player(proc, ipc_path)
        GPIO.cleanup()


if __name__ == "__main__":
    # Einstiegspunkt, wenn das Skript direkt ausgeführt wird
    main()
